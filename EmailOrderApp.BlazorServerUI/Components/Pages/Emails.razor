@page "/emails"
@rendermode InteractiveServer
@using EmailOrderApp.Application.Interfaces
@using EmailOrderApp.Application.DTOs;

@inject IEmailProcessingService EmailProcessingService


<h1 class="text-2xl font-bold mb-4">Zamówienia</h1>

<button @onclick="FetchEmails" class="bg-blue-500">
    Pobierz nowe maile
</button>

<button @onclick="GetEmails" class="bg-blue-500">
    Wyświetl maile
</button>


@if (loading)
{
    <p>Ładowanie...</p>
}
else if (emails is null || !emails.Any())
{
    <p>Brak wiadomości.</p>
}
else
{
    <ul class="space-y-4">
        @foreach (var email in emails)
        {
            <li class="p-4 border rounded shadow">
                <div><strong>Id:</strong> @email.Id.</div>
                <div><strong>Treść:</strong> @email.BodyText.</div>
            </li>
        }
    </ul>
}
@code {
    private List<EmailMessageDto>? emails;
    private bool loading;
    private string errorMessage = string.Empty;

    private async Task FetchEmails(){

        try{
            loading = true;
            await EmailProcessingService.FetchAndProcessEmailsAsync();
        } catch(Exception ex){
            errorMessage = ex.Message;
        } finally {
            loading = false;
        }
    
    }

    private async Task GetEmails(){
        try{
            loading = true;
            emails = await EmailProcessingService.GetEmailsAsync();
        } catch (Exception ex){
            errorMessage = ex.Message;
        } finally {
            loading = false;
        }
    }

}

