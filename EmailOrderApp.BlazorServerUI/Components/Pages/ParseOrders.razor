@page "/"
@rendermode InteractiveServer
@using EmailOrderApp.Application.Interfaces
@using EmailOrderApp.Application.DTOs
@using Radzen
@using Radzen.Blazor
@inject IOrderProcessingService OrderProcessingService
@inject NotificationService NotificationService


<RadzenNotification />
<RadzenButton Text="Pobierz nowe zamówienia" Click="ParseNewOrdersAsync" ButtonStyle="ButtonStyle.Primary" />
<RadzenButton Text="Wyświetl zamówienia" Click="GetAllOrdersAsync" ButtonStyle="ButtonStyle.Secondary"/>
@if(loading){
    <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"></RadzenProgressBarCircular>
}

@if (orders != null && orders.Any())
{
    <RadzenDataGrid @ref="grid" Data="@orders" TItem="OrderDto" ExpandMode="DataGridExpandMode.Multiple"
        AllowFiltering="true" AllowSorting="true">
        <Columns>
            <RadzenDataGridColumn TItem="OrderDto" Title="Numer zamówienia" Property="OrderNumber" />
            <RadzenDataGridColumn TItem="OrderDto" Title="Klient" Property="CustomerName" />
            <RadzenDataGridColumn TItem="OrderDto" Title="Data">
                <Template Context="order">
                    @order.OrderDate.ToString("yyyy-MM-dd")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrderDto" Title="Suma z dostawą">
                <Template Context="order">
                    @order.TotalAmount.ToString("C")
                </Template>
            </RadzenDataGridColumn>

        </Columns>
        <Template Context="order">
            <RadzenDataGrid Data="@order.OrderItems" TItem="OrderItemDto" ShowPagingSummary="false" AllowSorting="true"
                AllowFiltering="true">
                <Columns>
                    <RadzenDataGridColumn TItem="OrderItemDto" Title="Produkt" Property="Name" />
                    <RadzenDataGridColumn TItem="OrderItemDto" Title="Ilość" Property="Count" />
                    <RadzenDataGridColumn TItem="OrderItemDto" Title="Cena" Property="Price">
                        <Template Context="item">
                            @item.Price.ToString("C")
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </Template>
    </RadzenDataGrid>
}


@code {
    private List<OrderDto>? orders;
    private RadzenDataGrid<OrderDto>? grid;
    private bool loading = false;
    private bool parsed = false;
    
    private int orderCount;

    private async Task ParseNewOrdersAsync()
    {
        try
        {
            loading = true;
            orderCount = await OrderProcessingService.ParseAndSaveOrdersAsync();
            //throw new NullReferenceException();
            if (orderCount == 0) ShowNotification("Brak nowych zamówień.", NotificationSeverity.Info);
            else ShowNotification($"Zarejestrowano nowe zamówienia: {orderCount}", NotificationSeverity.Success);

            //Thread.Sleep(2000);


            orders = await OrderProcessingService.GetAllAsync();
        }
        catch (Exception)
        {
            
            ShowNotification($"Błąd podczas rejestrowania zamówień",NotificationSeverity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task GetAllOrdersAsync()
    {
        try
        {
            loading = true;
            
            orders = await OrderProcessingService.GetAllAsync();
        }
        catch (Exception)
        {
            ShowNotification($"Błąd",NotificationSeverity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    void ShowNotification(string message, NotificationSeverity severity)
    {
        var notificationMessage = new NotificationMessage {
            Severity = severity,
            Summary = message,
            Duration = 3000
        };

        NotificationService.Notify(notificationMessage);
    }
}